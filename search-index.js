var searchIndex = {};
searchIndex["base64"] = {"doc":"Configs","items":[[3,"Config","base64","Contains configuration parameters for base64 encoding",null,null],[4,"DecodeError","","Errors that can occur while decoding.",null,null],[13,"InvalidByte","","An invalid byte was found in the input. The offset and offending byte are provided.",0,null],[13,"InvalidLength","","The length of the input is invalid.",0,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",1,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",1,null],[13,"Crypt","","The `crypt(3)` character set (uses `./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz`)",1,null],[4,"LineEnding","","Line ending used in optional line wrapping.",null,null],[13,"LF","","Unix-style \\n",2,null],[13,"CRLF","","Windows-style \\r\\n",2,null],[4,"LineWrap","","Line wrap configuration.",null,null],[13,"NoWrap","","Don't wrap.",3,null],[13,"Wrap","","Wrap lines with the specified length and line ending. The length must be > 0.",3,null],[5,"encode","","Encode arbitrary octets as base64. Returns a String. Convenience for `encode_config(input, base64::STANDARD);`.",null,{"inputs":[{"name":"t"}],"output":{"name":"string"}}],[5,"encode_config","","Encode arbitrary octets as base64. Returns a String.",null,{"inputs":[{"name":"t"},{"name":"config"}],"output":{"name":"string"}}],[5,"encode_config_buf","","Encode arbitrary octets as base64. Writes into the supplied output buffer, which will grow the buffer if needed.",null,{"inputs":[{"name":"t"},{"name":"config"},{"name":"string"}],"output":null}],[5,"encode_config_slice","","Encode arbitrary octets as base64. Writes into the supplied output buffer.",null,null],[5,"decode","","Decode from string reference as octets. Returns a Result containing a Vec. Convenience `decode_config(input, base64::STANDARD);`.",null,{"inputs":[{"name":"t"}],"output":{"generics":["vec","decodeerror"],"name":"result"}}],[5,"decode_config","","Decode from string reference as octets. Returns a Result containing a Vec.",null,{"inputs":[{"name":"t"},{"name":"config"}],"output":{"generics":["vec","decodeerror"],"name":"result"}}],[5,"decode_config_buf","","Decode from string reference as octets. Writes into the supplied buffer to avoid allocation. Returns a Result containing an empty tuple, aka ().",null,{"inputs":[{"name":"t"},{"name":"config"},{"name":"vec"}],"output":{"generics":["decodeerror"],"name":"result"}}],[5,"decode_config_slice","","Decode the input into the provided output slice.",null,null],[0,"display","","Enables base64'd output anywhere you might use a `Display` implementation, like a format string.",null,null],[3,"Base64Display","base64::display","A convenience wrapper for base64'ing bytes into a format string without heap allocation.",null,null],[4,"DisplayError","","Errors that can occur initializing a Base64Display.",null,null],[13,"InvalidLineLength","","If wrapping is configured, the line length must be a multiple of 4, and must not be absurdly large (currently capped at 1024, subject to change).",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"displayerror"}],"output":{"name":"bool"}}],[11,"with_config","","Create a `Base64Display` with the provided config.",5,null],[11,"standard","","Convenience method for creating a `Base64Display` with the `STANDARD` configuration.",5,null],[11,"url_safe","","Convenience method for creating a `Base64Display` with the `URL_SAFE` configuration.",5,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","base64","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"decodeerror"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"decodeerror"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[17,"STANDARD","","Standard character set with padding.",null,null],[17,"STANDARD_NO_PAD","","Standard character set without padding.",null,null],[17,"MIME","","As per standards for MIME encoded messages",null,null],[17,"URL_SAFE","","URL-safe character set with padding",null,null],[17,"URL_SAFE_NO_PAD","","URL-safe character set without padding",null,null],[17,"CRYPT","","As per `crypt(3)` requirements",null,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"characterset"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"lineending"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"linewrap"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Config`.",6,{"inputs":[{"name":"characterset"},{"name":"bool"},{"name":"bool"},{"name":"linewrap"}],"output":{"name":"config"}}]],"paths":[[4,"DecodeError"],[4,"CharacterSet"],[4,"LineEnding"],[4,"LineWrap"],[4,"DisplayError"],[3,"Base64Display"],[3,"Config"]]};
searchIndex["bit_set"] = {"doc":"An implementation of a set using a bit vector as an underlying representation for holding unsigned numerical elements.","items":[[3,"BitSet","bit_set","",null,null],[3,"Iter","","An iterator for `BitSet`.",null,null],[3,"Union","","",null,null],[3,"Intersection","","",null,null],[3,"Difference","","",null,null],[3,"SymmetricDifference","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"from_iter","","",0,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new empty `BitSet`.",0,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates a new `BitSet` with initially no contents, able to hold `nbits` elements without resizing.",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_bit_vec","","Creates a new `BitSet` from the given bit vector.",0,{"inputs":[{"name":"bitvec"}],"output":{"name":"self"}}],[11,"from_bytes","","",0,null],[11,"capacity","","Returns the capacity in bits for this bit vector. Inserting any element less than this amount will not trigger a resizing.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve_len","","Reserves capacity for the given `BitSet` to contain `len` distinct elements. In the case of `BitSet` this means reallocations will not occur as long as all inserted elements are less than `len`.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `BitSet` to contain `len` distinct elements. In the case of `BitSet` this means reallocations will not occur as long as all inserted elements are less than `len`.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"into_bit_vec","","Consumes this set to return the underlying bit vector.",0,{"inputs":[{"name":"self"}],"output":{"name":"bitvec"}}],[11,"get_ref","","Returns a reference to the underlying bit vector.",0,{"inputs":[{"name":"self"}],"output":{"name":"bitvec"}}],[11,"shrink_to_fit","","Truncates the underlying vector to the least length required.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"iter","","Iterator over each usize stored in the `BitSet`.",0,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"union","","Iterator over each usize stored in `self` union `other`. See union_with for an efficient in-place version.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"union"}}],[11,"intersection","","Iterator over each usize stored in `self` intersect `other`. See intersect_with for an efficient in-place version.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"intersection"}}],[11,"difference","","Iterator over each usize stored in the `self` setminus `other`. See difference_with for an efficient in-place version.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Iterator over each usize stored in the symmetric difference of `self` and `other`. See symmetric_difference_with for an efficient in-place version.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"symmetricdifference"}}],[11,"union_with","","Unions in-place with the specified other bit vector.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"intersect_with","","Intersects in-place with the specified other bit vector.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"difference_with","","Makes this bit vector the difference with the specified other bit vector in-place.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"symmetric_difference_with","","Makes this bit vector the symmetric difference with the specified other bit vector in-place.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"len","","Returns the number of set bits in this set.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether there are no bits set in this set",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Clears all bits in this set",0,{"inputs":[{"name":"self"}],"output":null}],[11,"contains","","Returns `true` if this set contains the specified integer.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`. This is equivalent to checking for an empty intersection.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already present in the set.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was present in the set.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"union"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"intersection"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"difference"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"size_hint","","",1,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"size_hint","","",2,null],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"size_hint","","",3,null],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"size_hint","","",4,null],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"size_hint","","",5,null]],"paths":[[3,"BitSet"],[3,"Iter"],[3,"Union"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"]]};
searchIndex["bit_vec"] = {"doc":"Collections implemented with bit vectors.","items":[[3,"BitVec","bit_vec","The bitvector type.",null,null],[3,"Iter","","An iterator for `BitVec`.",null,null],[3,"IntoIter","","",null,null],[3,"Blocks","","An iterator over the blocks of a `BitVec`.",null,null],[8,"BitBlock","","Abstracts over a pile of bits (basically unsigned primitives)",null,null],[10,"bits","","How many bits it has",0,{"inputs":[],"output":{"name":"usize"}}],[11,"bytes","","How many bytes it has",0,{"inputs":[],"output":{"name":"usize"}}],[10,"from_byte","","Convert a byte into this type (lowest-order bits set)",0,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[10,"count_ones","","Count the number of 1's in the bitwise repr",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"zero","","Get `0`",0,{"inputs":[],"output":{"name":"self"}}],[10,"one","","Get `1`",0,{"inputs":[],"output":{"name":"self"}}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"new","","Creates an empty `BitVec`.",1,{"inputs":[],"output":{"name":"self"}}],[11,"from_elem","","Creates a `BitVec` that holds `nbits` elements, setting each element to `bit`.",1,{"inputs":[{"name":"usize"},{"name":"bool"}],"output":{"name":"self"}}],[11,"with_capacity","","Constructs a new, empty `BitVec` with the specified capacity.",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_bytes","","Transforms a byte-vector into a `BitVec`. Each byte becomes eight bits, with the most significant bits of each byte coming first. Each bit becomes `true` if equal to 1 or `false` if equal to 0.",1,null],[11,"from_fn","","Creates a `BitVec` of the specified length where the value at each index is `f(index)`.",1,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"self"}}],[11,"blocks","","Iterator over the underlying blocks of data",1,{"inputs":[{"name":"self"}],"output":{"name":"blocks"}}],[11,"storage","","Exposes the raw block storage of this BitVec",1,null],[11,"storage_mut","","Exposes the raw block storage of this BitVec",1,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get","","Retrieves the value at index `i`, or `None` if the index is out of bounds.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["bool"],"name":"option"}}],[11,"set","","Sets the value of a bit at an index `i`.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"set_all","","Sets all bits to 1.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"negate","","Flips all bits.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"union","","Calculates the union of two bitvectors. This acts like the bitwise `or` function.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"intersect","","Calculates the intersection of two bitvectors. This acts like the bitwise `and` function.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"difference","","Calculates the difference between two bitvectors.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"all","","Returns `true` if all bits are 1.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the elements of the vector in order.",1,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"none","","Returns `true` if all bits are 0.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"any","","Returns `true` if any bit is 1.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_bytes","","Organises the bits into bytes, such that the first bit in the `BitVec` becomes the high-order bit of the first byte. If the size of the `BitVec` is not a multiple of eight then trailing bits will be filled-in with `false`.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"eq_vec","","Compares a `BitVec` to a slice of `bool`s. Both the `BitVec` and slice must have the same length.",1,null],[11,"truncate","","Shortens a `BitVec`, dropping excess elements.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve","","Reserves capacity for at least `additional` more bits to be inserted in the given `BitVec`. The collection may reserve more space to avoid frequent reallocations.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bits to be inserted in the given `BitVec`. Does nothing if the capacity is already sufficient.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"capacity","","Returns the capacity in bits for this bit vector. Inserting any element less than this amount will not trigger a resizing.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"grow","","Grows the `BitVec` in-place, adding `n` copies of `value` to the `BitVec`.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"pop","","Removes the last bit from the BitVec, and returns it. Returns None if the BitVec is empty.",1,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"push","","Pushes a `bool` onto the end.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"len","","Returns the total number of bits in this vector",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_len","","Sets the number of bits that this BitVec considers initialized.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"is_empty","","Returns true if there are no bits in this vector",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Clears all bits in this vector.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the underlying storage as much as possible.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"from_iter","","",1,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"size_hint","","",2,null],[11,"next_back","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"next_back","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"into_iter","","",1,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"blocks"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[8,"BitBlock"],[3,"BitVec"],[3,"Iter"],[3,"IntoIter"],[3,"Blocks"]]};
searchIndex["bitstream_io"] = {"doc":"Traits and helpers for bitstream handling functionality","items":[[3,"BigEndian","bitstream_io","Big-endian, or most significant bits first",null,null],[3,"LittleEndian","","Little-endian, or least significant bits first",null,null],[3,"BitQueue","","A queue for efficiently pushing bits onto a value and popping them off a value.",null,null],[0,"read","","Traits and implementations for reading bits from a stream.",null,null],[3,"BitReader","bitstream_io::read","For reading non-aligned bits from a stream of bytes in a given endianness.",null,null],[11,"new","","Wraps a BitReader around something that implements `Read`",0,{"inputs":[{"name":"read"}],"output":{"name":"bitreader"}}],[11,"read_bit","","Reads a single bit from the stream. `true` indicates 1, `false` indicates 0",0,{"inputs":[{"name":"self"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"read","","Reads an unsigned value from the stream with the given number of bits.",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"skip","","Skips the given number of bits in the stream. Since this method does not need an accumulator, it may be slightly faster than reading to an empty variable. In addition, since there is no accumulator, there is no upper limit on the number of bits which may be skipped. These bits are still read from the stream, however, and are never skipped via a `seek` method.",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"read_bytes","","Completely fills the given buffer with whole bytes. If the stream is already byte-aligned, it will typically map to a faster `read_exact` call.  Otherwise it will read bytes individually in 8-bit increments.",0,null],[11,"read_unary0","","Counts the number of 1 bits in the stream until the next 0 bit and returns the amount read. Because this field is variably-sized and may be large, its output is always a `u32` type.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32","error"],"name":"result"}}],[11,"read_unary1","","Counts the number of 0 bits in the stream until the next 1 bit and returns the amount read. Because this field is variably-sized and may be large, its output is always a `u32` type.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32","error"],"name":"result"}}],[11,"byte_aligned","","Returns true if the stream is aligned at a whole byte.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"byte_align","","Throws away all unread bit values until the next whole byte. Does nothing if the stream is already aligned.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"read_huffman","","Given a compiled Huffman tree, reads bits from the stream until the next symbol is encountered.",0,null],[11,"into_unread","","Consumes reader and returns any un-read partial byte as a `(bits, value)` tuple.",0,null],[11,"read_signed","","Reads a twos-complement signed value from the stream with the given number of bits.",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"read_signed","","Reads a twos-complement signed value from the stream with the given number of bits.",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[0,"write","bitstream_io","Traits and implementations for writing bits to a stream.",null,null],[3,"BitWriter","bitstream_io::write","For writing bit values to an underlying stream in a given endianness.",null,null],[11,"new","","Wraps a BitWriter around something that implements `Write`",1,{"inputs":[{"name":"write"}],"output":{"name":"bitwriter"}}],[11,"write_bit","","Writes a single bit to the stream. `true` indicates 1, `false` indicates 0",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"write","","Writes an unsigned value to the stream using the given number of bits.",1,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_bytes","","Writes the entirety of a byte buffer to the stream. If the stream is already byte-aligned, it will often map to a faster `write_all` call.  Otherwise it will write bytes individually in 8-bit increments.",1,null],[11,"write_huffman","","Writes Huffman code for the given symbol to the stream.",1,{"inputs":[{"name":"self"},{"name":"writehuffmantree"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_unary0","","Writes `value` number of 1 bits to the stream and then writes a 0 bit.  This field is variably-sized.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_unary1","","Writes `value` number of 0 bits to the stream and then writes a 1 bit.  This field is variably-sized.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"byte_aligned","","Returns true if the stream is aligned at a whole byte.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"byte_align","","Pads the stream with 0 bits until it is aligned at a whole byte. Does nothing if the stream is already aligned.",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"into_unwritten","","Consumes writer and returns any un-written partial byte as a `(bits, value)` tuple.",1,null],[11,"write_signed","","Writes a twos-complement signed value to the stream with the given number of bits.",1,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"s"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_signed","","Writes a twos-complement signed value to the stream with the given number of bits.",1,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"s"}],"output":{"generics":["error"],"name":"result"}}],[0,"huffman","bitstream_io","Traits and implementations for reading or writing Huffman codes from or to a stream.",null,null],[3,"WriteHuffmanTree","bitstream_io::huffman","A compiled Huffman tree for use with the `write_huffman` method. Returned by `compiled_write_tree`.",null,null],[4,"ReadHuffmanTree","","A compiled Huffman tree element for use with the `read_huffman` method. Returned by `compile_read_tree`.",null,null],[13,"Done","","The final value and new reader state",2,null],[13,"Continue","","Another byte is necessary to determine final value",2,null],[13,"InvalidState","","An invalid reader state has been used",2,null],[4,"HuffmanTreeError","","An error type during Huffman tree compilation.",null,null],[13,"InvalidBit","","One of the bits in a Huffman code is not 0 or 1",3,null],[13,"MissingLeaf","","A Huffman code in the specification has no defined symbol",3,null],[13,"DuplicateLeaf","","The same Huffman code specifies multiple symbols",3,null],[13,"OrphanedLeaf","","A Huffman code is the prefix of some longer code",3,null],[5,"compile_read_tree","","Given a vector of symbol/code pairs, compiles a Huffman tree for reading.",null,{"inputs":[{"name":"vec"}],"output":{"generics":["box","huffmantreeerror"],"name":"result"}}],[5,"compile_write_tree","","Given a vector of symbol/code pairs, compiles a Huffman tree for writing.",null,{"inputs":[{"name":"vec"}],"output":{"generics":["writehuffmantree","huffmantreeerror"],"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"huffmantreeerror"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"huffmantreeerror"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"has_symbol","","Returns true if symbol is in tree.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"get","","Given symbol, returns (bits, value) pairs for writing code. Panics if symbol is not found.",4,null],[6,"BE","bitstream_io","Big-endian, or most significant bits first",null,null],[6,"LE","","Little-endian, or least significant bits first",null,null],[8,"Numeric","","This trait extends many common integer types (both unsigned and signed) with a few trivial methods so that they can be used with the bitstream handling traits.",null,null],[10,"one","","The value of 1 in this type",5,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns true if this value is 0, in its type",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"from_u8","","Returns a `u8` value in this type",5,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[10,"to_u8","","Assuming 0 <= value < 256, returns this value as a `u8` type",5,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[10,"count_ones","","Counts the number of 1 bits",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Counts the number of leading zeros",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Counts the number of trailing zeros",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"bits_size","","Size of type in bits",5,{"inputs":[],"output":{"name":"u32"}}],[8,"SignedNumeric","","This trait extends many common signed integer types so that they can be used with the bitstream handling traits.",null,null],[10,"is_negative","","Returns true if this value is negative",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"as_negative","","Given a two-complement positive value and certain number of bits, returns this value as a negative number.",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"as_unsigned","","Given a negative value and a certain number of bits, returns this value as a twos-complement positive number.",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[8,"Endianness","","A stream's endianness, or byte order, for determining how bits should be read.",null,null],[10,"push","","Pushes the given bits and value onto an accumulator with the given bits and value.",7,{"inputs":[{"name":"u32"},{"name":"n"},{"name":"u32"},{"name":"n"}],"output":null}],[10,"pop","","Pops a value with the given number of bits from an accumulator with the given bits and value.",7,{"inputs":[{"name":"u32"},{"name":"n"},{"name":"u32"}],"output":{"name":"n"}}],[10,"drop","","Drops the given number of bits from an accumulator with the given bits and value.",7,{"inputs":[{"name":"u32"},{"name":"n"},{"name":"u32"}],"output":null}],[10,"next_zeros","","Returns the next number of 0 bits from an accumulator with the given bits and value.",7,{"inputs":[{"name":"u32"},{"name":"n"}],"output":{"name":"u32"}}],[10,"next_ones","","Returns the next number of 1 bits from an accumulator with the given bits and value.",7,{"inputs":[{"name":"u32"},{"name":"n"}],"output":{"name":"u32"}}],[11,"push","","",8,{"inputs":[{"name":"u32"},{"name":"n"},{"name":"u32"},{"name":"n"}],"output":null}],[11,"pop","","",8,{"inputs":[{"name":"u32"},{"name":"n"},{"name":"u32"}],"output":{"name":"n"}}],[11,"drop","","",8,{"inputs":[{"name":"u32"},{"name":"n"},{"name":"u32"}],"output":null}],[11,"next_zeros","","",8,{"inputs":[{"name":"u32"},{"name":"n"}],"output":{"name":"u32"}}],[11,"next_ones","","",8,{"inputs":[{"name":"u32"},{"name":"n"}],"output":{"name":"u32"}}],[11,"push","","",9,{"inputs":[{"name":"u32"},{"name":"n"},{"name":"u32"},{"name":"n"}],"output":null}],[11,"pop","","",9,{"inputs":[{"name":"u32"},{"name":"n"},{"name":"u32"}],"output":{"name":"n"}}],[11,"drop","","",9,{"inputs":[{"name":"u32"},{"name":"n"},{"name":"u32"}],"output":null}],[11,"next_zeros","","",9,{"inputs":[{"name":"u32"},{"name":"n"}],"output":{"name":"u32"}}],[11,"next_ones","","",9,{"inputs":[{"name":"u32"},{"name":"n"}],"output":{"name":"u32"}}],[11,"new","","Returns a new empty queue",10,{"inputs":[],"output":{"name":"bitqueue"}}],[11,"from_value","","Creates a new queue from the given value with the given size Panics if the value is larger than the given number of bits.",10,{"inputs":[{"name":"n"},{"name":"u32"}],"output":{"name":"bitqueue"}}],[11,"set","","Sets the queue to a given value with the given number of bits Panics if the value is larger than the given number of bits",10,{"inputs":[{"name":"self"},{"name":"n"},{"name":"u32"}],"output":null}],[11,"value","","Consumes the queue and returns its current value",10,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"len","","Returns the total bits in the queue",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"max_len","","Returns the maximum bits the queue can hold",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"remaining_len","","Returns the remaining bits the queue can hold",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_empty","","Returns true if the queue is empty",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_full","","Returns true if the queue is full",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Drops all values in the queue",10,{"inputs":[{"name":"self"}],"output":null}],[11,"all_0","","Returns true if all bits remaining in the queue are 0",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"all_1","","Returns true if all bits remaining in the queue are 1",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Pushes a value with the given number of bits onto the tail of the queue Panics if the number of bits pushed is larger than the queue can hold.",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"n"}],"output":null}],[11,"pop","","Pops a value with the given number of bits from the head of the queue Panics if the number of bits popped is larger than the number of bits in the queue.",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"n"}}],[11,"drop","","Drops the given number of bits from the head of the queue without returning them. Panics if the number of bits dropped is larger than the number of bits in the queue.",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"pop_0","","Pops all 0 bits up to and including the next 1 bit and returns the amount of 0 bits popped",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"pop_1","","Pops all 1 bits up to and including the next 0 bit and returns the amount of 1 bits popped",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"to_state","","Returns the state of the queue as a single value which can be used to perform lookups.",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}]],"paths":[[3,"BitReader"],[3,"BitWriter"],[4,"ReadHuffmanTree"],[4,"HuffmanTreeError"],[3,"WriteHuffmanTree"],[8,"Numeric"],[8,"SignedNumeric"],[8,"Endianness"],[3,"BigEndian"],[3,"LittleEndian"],[3,"BitQueue"]]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers in either [big-endian or little-endian order].","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"BE","","A type alias for [`BigEndian`].",null,null],[6,"LE","","A type alias for [`LittleEndian`].",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends [`Read`] with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"result"}}],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"result"}}],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,null],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,null],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,null],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,null],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,null],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,null],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f32_into_unchecked","","DEPRECATED.",0,null],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f64_into_unchecked","","DEPRECATED.",0,null],[8,"WriteBytesExt","","Extends [`Write`] with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","`ByteOrder` describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,null],[11,"read_u24","","Reads an unsigned 24 bit integer from `buf`, stored in u32.",2,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,null],[11,"write_u24","","Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.",2,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,null],[11,"read_i24","","Reads a signed 24 bit integer from `buf`, stored in i32.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,null],[11,"write_i24","","Writes a signed 24 bit integer `n` to `buf`, stored in i32.",2,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,null],[10,"read_u16_into","","Reads unsigned 16 bit integers from `src` into `dst`.",2,null],[10,"read_u32_into","","Reads unsigned 32 bit integers from `src` into `dst`.",2,null],[10,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.",2,null],[11,"read_i16_into","","Reads signed 16 bit integers from `src` to `dst`.",2,null],[11,"read_i32_into","","Reads signed 32 bit integers from `src` into `dst`.",2,null],[11,"read_i64_into","","Reads signed 64 bit integers from `src` into `dst`.",2,null],[11,"read_f32_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[11,"read_f64_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[10,"write_u16_into","","Writes unsigned 16 bit integers from `src` into `dst`.",2,null],[10,"write_u32_into","","Writes unsigned 32 bit integers from `src` into `dst`.",2,null],[10,"write_u64_into","","Writes unsigned 64 bit integers from `src` into `dst`.",2,null],[11,"write_i16_into","","Writes signed 16 bit integers from `src` into `dst`.",2,null],[11,"write_i32_into","","Writes signed 32 bit integers from `src` into `dst`.",2,null],[11,"write_i64_into","","Writes signed 64 bit integers from `src` into `dst`.",2,null],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point numbers from `src` into `dst`.",2,null],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a particular endianness.",2,null],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a particular endianness.",2,null],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a particular endianness.",2,null],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a particular endianness.",2,null],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a particular endianness.",2,null],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a particular endianness.",2,null],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4 bytes) floating point numbers to a particular endianness.",2,null],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8 bytes) floating point numbers to a particular endianness.",2,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigendian"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"ordering"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"bigendian"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"littleendian"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"ordering"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"littleendian"}}],[11,"read_u16","","",3,null],[11,"read_u32","","",3,null],[11,"read_u64","","",3,null],[11,"read_uint","","",3,null],[11,"write_u16","","",3,null],[11,"write_u32","","",3,null],[11,"write_u64","","",3,null],[11,"write_uint","","",3,null],[11,"read_u16_into","","",3,null],[11,"read_u32_into","","",3,null],[11,"read_u64_into","","",3,null],[11,"write_u16_into","","",3,null],[11,"write_u32_into","","",3,null],[11,"write_u64_into","","",3,null],[11,"from_slice_u16","","",3,null],[11,"from_slice_u32","","",3,null],[11,"from_slice_u64","","",3,null],[11,"from_slice_f32","","",3,null],[11,"from_slice_f64","","",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u16_into","","",4,null],[11,"read_u32_into","","",4,null],[11,"read_u64_into","","",4,null],[11,"write_u16_into","","",4,null],[11,"write_u32_into","","",4,null],[11,"write_u64_into","","",4,null],[11,"from_slice_u16","","",4,null],[11,"from_slice_u32","","",4,null],[11,"from_slice_u64","","",4,null],[11,"from_slice_f32","","",4,null],[11,"from_slice_f64","","",4,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"result"}}],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"result"}}],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,null],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,null],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,null],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,null],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,null],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,null],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f32_into_unchecked","","DEPRECATED.",0,null],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f64_into_unchecked","","DEPRECATED.",0,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["gdpr_consent"] = {"doc":"","items":[[0,"vendor","gdpr_consent","",null,null],[3,"V1","gdpr_consent::vendor","",null,null],[12,"created","","",0,null],[12,"last_updated","","",0,null],[12,"cmp_id","","",0,null],[12,"cmp_version","","",0,null],[12,"consent_screen","","",0,null],[12,"consent_language","","",0,null],[12,"vendor_list_version","","",0,null],[12,"purposes_allowed","","",0,null],[12,"max_vendor_id","","",0,null],[12,"vendor_consent","","",0,null],[4,"VendorConsent","","",null,null],[13,"V1","","",1,null],[4,"Error","","",null,null],[13,"Base64DecodeError","","",2,null],[13,"UnsupportedVersion","","",2,null],[13,"IoError","","",2,null],[13,"FromUtf8Error","","",2,null],[13,"Other","","",2,null],[5,"from_str","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["vendorconsent","error"],"name":"result"}}],[5,"to_str","","",null,{"inputs":[{"name":"vendorconsent"}],"output":{"generics":["string","error"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"v1"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"v1"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",2,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",2,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"error"}}],[11,"from","","",2,{"inputs":[{"name":"decodeerror"}],"output":{"name":"error"}}]],"paths":[[3,"V1"],[4,"VendorConsent"],[4,"Error"]]};
searchIndex["safemem"] = {"doc":"Safe wrappers for memory-accessing functions like `std::ptr::copy()`.","items":[[5,"copy_over","safemem","Copy `len` elements from `src_idx` to `dest_idx`. Ranges may overlap.",null,null],[5,"write_bytes","","Safe wrapper for `std::ptr::write_bytes()`/`memset()`.",null,null],[5,"prepend","","Prepend `elems` to `vec`, resizing if necessary.",null,null]],"paths":[]};
initSearch(searchIndex);
